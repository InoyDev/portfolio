---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = 'Yoni Mahieddine',
	description = 'Portfolio officiel de Yoni Mahieddine',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<script is:inline>
	// Function to get the user's theme preference from localStorage or system preference
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			// Use the theme stored in localStorage if available
			return localStorage.getItem('theme');
		}
		// Otherwise, use the system's preference (light by default)
		return 'light'; // On force ici light comme thème par défaut
	};

	// Apply the theme to the document's HTML element
	const isLight = getThemePreference() === 'light';
	document.documentElement.classList[isLight ? 'add' : 'remove']('theme-light');
	document.documentElement.classList[isLight ? 'remove' : 'add']('theme-dark');

	// Persist theme changes in localStorage when the user changes it
	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isLight = document.documentElement.classList.contains('theme-light');
			localStorage.setItem('theme', isLight ? 'light' : 'dark');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
